# -*- coding: utf-8 -*-
"""Breast Cancer Clasification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJhs8PzmXKDGsYrZXOQEGorYRyN4oNQK
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
#Load the data
from google.colab import files
uploaded = files.upload()
df = pd.read_csv('data.csv')
df.head(7)

df.shape

df.isna().sum()

df = df.dropna(axis=1)

df.shape

df["diagnosis"].value_counts()

diagnosis_map = {'M': 212, 'B': 357}

df['diagnosis_numeric'] = df['diagnosis'].map(diagnosis_map)

sns.countplot(x='diagnosis_numeric', hue='diagnosis', data=df)

df.dtypes

#transform "M" and "B" to numbers "1" and "0"
from sklearn.preprocessing import LabelEncoder
labelencoder_Y = LabelEncoder()
#save it again in data frame
df.iloc[:,1] = labelencoder_Y.fit_transform(df.iloc[:,1].values)

sns.pairplot(df.iloc[:,1:5], hue = "diagnosis")

df.head(5)

df.iloc[:,1:12].corr()

plt.figure(figsize=(10, 10))
sns.heatmap(df.iloc[:,1:12].corr(), annot=True, fmt=".0%")

X = df.iloc[:,2:31].values
Y = df.iloc[:,1].values

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

def models(X_train, Y_train):

  from sklearn.linear_model import LogisticRegression
  log = LogisticRegression(random_state=0)
  log.fit(X_train, Y_train)

  from sklearn.tree import DecisionTreeClassifier
  tree = DecisionTreeClassifier(criterion="entropy",random_state=0)
  tree.fit(X_train, Y_train)

  from sklearn.ensemble import RandomForestClassifier
  forest=RandomForestClassifier(n_estimators=10, criterion = "entropy", random_state=0)
  forest.fit(X_train, Y_train)

  print("[0]Logistic Regression Training Accuracy:", log.score(X_train, Y_train))
  print("[1]Decision Tree Classifier Training Accuracy:", tree.score(X_train, Y_train))
  print("[2]Random Forest Classifier Training Accuracy:", forest.score(X_train, Y_train))

  return log, tree, forest

#Getting all together
model = models(X_train, Y_train)

from sklearn.metrics import confusion_matrix

for i in range( len(model) ):
  print("Model ", i)
  cm = confusion_matrix(Y_test, model[i].predict(X_test))

  TN = cm[0][0]
  TP = cm[1][1]
  FN = cm[1][0]
  FP = cm[0][1]


print(cm)
print("Testing accuracy = ", (TP + TN)/ (TP + TN + FN + FP))
print()

#Show another way to get matrics of the models
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

print( classification_report(Y_test, model[0].predict(X_test)))
print( accuracy_score(Y_test, model[0].predict(X_test)))

#print the prediction of the random forest classifier model
pred = model[2].predict(X_test)
print(pred)
print(Y_test)